# -*- coding: utf-8 -*-
"""
Модуль конфигурации приложения.

Загружает переменные окружения из файла .env и предоставляет их
в виде удобных констант или переменных для использования в других частях приложения.
Это помогает централизовать настройки и легко изменять их без модификации кода.
Например, здесь определяется путь к базе данных.
"""

import os
from dotenv import load_dotenv

# Определяем базовую директорию проекта.
# os.path.abspath(__file__) -> получает абсолютный путь к текущему файлу (config.py)
# os.path.dirname(...) -> получает директорию, в которой находится файл
# os.path.dirname(os.path.dirname(...)) -> поднимается на один уровень выше (из src/ в корень проекта)
basedir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

# Загружаем переменные окружения из файла .env, который должен находиться в корне проекта.
# Функция load_dotenv() ищет файл .env и загружает определенные в нем переменные в os.environ.
# Это позволяет хранить чувствительные данные (пароли, ключи API) или настройки среды
# отдельно от исходного кода.
load_dotenv(os.path.join(basedir, '.env'))

class Config:
    """
    Класс для хранения конфигурационных переменных приложения.
    Использование класса позволяет группировать настройки и легко расширять их.
    """
    # Секретный ключ для Flask-приложения.
    # Используется для защиты сессий, CSRF-токенов и других криптографических нужд.
    # В реальном приложении его следует генерировать случайным образом и хранить безопасно.
    # os.environ.get() пытается получить значение переменной окружения 'SECRET_KEY'.
    # Если переменная не найдена, используется значение по умолчанию 'your-secret-key'.
    # ВАЖНО: Замените 'your-secret-key' на действительно случайное и секретное значение для продакшена!
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-secret-key'

    # Конфигурация базы данных SQLAlchemy.
    # Получаем URL базы данных из переменной окружения 'DATABASE_URL'.
    # Если переменная не найдена, используется значение по умолчанию:
    # 'sqlite:///' + os.path.join(basedir, 'university_registry.db')
    # Это означает, что будет использоваться база данных SQLite с именем 'university_registry.db',
    # расположенная в корневой директории проекта.
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'university_registry.db')

    # Отключаем отслеживание модификаций объектов SQLAlchemy.
    # Это может потреблять дополнительные ресурсы и обычно не требуется,
    # если вы не используете специфические сигналы SQLAlchemy.
    # Установка в False рекомендуется для повышения производительности.
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Путь для кэширования загруженных данных Рособрнадзора
    # Создаем путь к папке 'data' в корне проекта.
    DATA_CACHE_PATH = os.path.join(basedir, 'data')

    # URL реестра Рособрнадзора (Пример! Уточните актуальный URL)
    # ВАЖНО: Замените этот URL на актуальный адрес портала Открытых Данных Рособрнадзора,
    # где находится реестр организаций.
    ROSOBRNADZOR_DATA_URL = os.environ.get('ROSOBRNADZOR_DATA_URL') or 'URL_К_ДАННЫМ_РОСОБРНАДЗОРА' # TODO: Указать реальный URL

# Создаем экземпляр конфигурации для использования в приложении
config = Config()
